import json
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from setting import config


def load_data(filename):
    with open(filename, "r") as f:
        data = json.load(f)
    df = pd.DataFrame(data)
    return df


def split_data(df):
    X = df.drop("label", axis=1)
    y = df["label"]
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test


def preprocess_data(X_train, X_test):
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    return X_train_scaled, X_test_scaled


def train_model(X_train, y_train):
    model = RandomForestClassifier()
    model.fit(X_train, y_train)
    return model


def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    return accuracy, precision, recall


def classify_apk(model, apk):
    # Extract features from the APK
    features = extract_features(apk)

    # Scale the features
    scaler = StandardScaler()
    features_scaled = scaler.transform(features)

    # Make a prediction using the model
    prediction = model.predict(features_scaled)

    return prediction


def main():
    path = config['apksResultJsonPath']
    print('path', path)
    # Load the data
    df = load_data(path)

    # Split the data into training and test sets
    X_train, X_test, y_train, y_test = split_data(df)

    # Preprocess the data
    X_train_scaled, X_test_scaled = preprocess_data(X_train, X_test)

    # Train the model
    model = train_model(X_train_scaled, y_train)

    # Evaluate the model
    accuracy, precision, recall = evaluate_model(model, X_test_scaled, y_test)
    print("Accuracy:", accuracy)
    print("Precision:", precision)
    print("Recall:", recall)

    # Classify a new APK
    apk = load_apk("new_apk.apk")
    prediction = classify_apk(model, apk)
    print("Prediction:", prediction)


if __name__ == "__main__":
    main()
